package models

import (
	"encoding/json"
	"time"
)

// Voucher representa un comprobante contable
// Basado en el schema del Swagger y prácticas contables colombianas
type Voucher struct {
	BaseModel
	OrganizationID       string    `json:"organization_id" gorm:"index;not null"`
	Number               string    `json:"number" gorm:"uniqueIndex:idx_org_voucher;not null"`
	VoucherType          string    `json:"voucher_type" gorm:"not null"` // JOURNAL, PURCHASE, SALE, PAYMENT, RECEIPT, ADJUSTMENT
	Date                 time.Time `json:"date" gorm:"not null;index"`
	Description          string    `json:"description" gorm:"not null"`
	Reference            string    `json:"reference"`
	PeriodID             string    `json:"period_id" gorm:"index;not null"`
	Status               string    `json:"status" gorm:"default:'DRAFT'"` // DRAFT, POSTED, CANCELLED
	TotalDebit           float64   `json:"total_debit" gorm:"type:decimal(15,2);default:0"`
	TotalCredit          float64   `json:"total_credit" gorm:"type:decimal(15,2);default:0"`
	IsBalanced           bool      `json:"is_balanced" gorm:"default:false"`
	CreatedByUserID      string    `json:"created_by_user_id" gorm:"index"`
	PostedByUserID       *string   `json:"posted_by_user_id" gorm:"index"`
	PostedAt             *time.Time `json:"posted_at"`
	ThirdPartyID         *string   `json:"third_party_id" gorm:"index"`
	CostCenterID         *string   `json:"cost_center_id" gorm:"index"`
	AttachmentsJSON      string    `json:"-" gorm:"type:text;column:attachments"`
	DSLProcessingJSON    string    `json:"-" gorm:"type:text;column:dsl_processing"`
	AdditionalDataJSON   string    `json:"-" gorm:"type:text;column:additional_data"`
	VoucherLines         []VoucherLine `json:"voucher_lines" gorm:"foreignKey:VoucherID;constraint:OnDelete:CASCADE"`
	
	// Relaciones
	ThirdParty          *ThirdParty `json:"third_party,omitempty" gorm:"foreignKey:ThirdPartyID"`
}

// VoucherLine representa una línea de comprobante contable
type VoucherLine struct {
	BaseModel
	VoucherID       string  `json:"voucher_id" gorm:"index;not null"`
	AccountID       string  `json:"account_id" gorm:"index;not null"`
	Description     string  `json:"description" gorm:"not null"`
	DebitAmount     float64 `json:"debit_amount" gorm:"type:decimal(15,2);default:0"`
	CreditAmount    float64 `json:"credit_amount" gorm:"type:decimal(15,2);default:0"`
	ThirdPartyID    *string `json:"third_party_id" gorm:"index"`
	CostCenterID    *string `json:"cost_center_id" gorm:"index"`
	TaxAmount       float64 `json:"tax_amount" gorm:"type:decimal(15,2);default:0"`
	TaxRate         float64 `json:"tax_rate" gorm:"type:decimal(5,2);default:0"`
	BaseAmount      float64 `json:"base_amount" gorm:"type:decimal(15,2);default:0"`
	LineNumber      int     `json:"line_number" gorm:"not null"`
	MetadataJSON    string  `json:"-" gorm:"type:text;column:metadata"`
	
	// Relaciones
	Account    *Account    `json:"account,omitempty" gorm:"foreignKey:AccountID"`
	ThirdParty *ThirdParty `json:"third_party,omitempty" gorm:"foreignKey:ThirdPartyID"`
}

// VoucherAttachment información de archivos adjuntos
type VoucherAttachment struct {
	ID           string `json:"id"`
	FileName     string `json:"file_name"`
	FileSize     int64  `json:"file_size"`
	ContentType  string `json:"content_type"`
	UploadedAt   string `json:"uploaded_at"`
	UploadedBy   string `json:"uploaded_by"`
	FilePath     string `json:"file_path"`
	Description  string `json:"description"`
}

// DSLProcessingInfo información del procesamiento DSL
type DSLProcessingInfo struct {
	TemplateID       string                 `json:"template_id"`
	TemplateName     string                 `json:"template_name"`
	ProcessedAt      time.Time              `json:"processed_at"`
	ProcessingStatus string                 `json:"processing_status"` // SUCCESS, ERROR, PENDING
	ValidationErrors []string               `json:"validation_errors,omitempty"`
	GeneratedLines   int                    `json:"generated_lines"`
	ExecutionTimeMs  int64                  `json:"execution_time_ms"`
	Variables        map[string]interface{} `json:"variables,omitempty"`
}

// VoucherAdditionalData datos adicionales del comprobante
type VoucherAdditionalData struct {
	SourceSystem     string                 `json:"source_system"`
	SourceReference  string                 `json:"source_reference"`
	AutoGenerated    bool                   `json:"auto_generated"`
	Reversible       bool                   `json:"reversible"`
	ReversalOf       string                 `json:"reversal_of,omitempty"`
	ApprovalRequired bool                   `json:"approval_required"`
	ApprovedBy       string                 `json:"approved_by,omitempty"`
	ApprovedAt       *time.Time             `json:"approved_at,omitempty"`
	CustomFields     map[string]interface{} `json:"custom_fields,omitempty"`
}

// GetAttachments deserializa los adjuntos del comprobante
func (v *Voucher) GetAttachments() ([]VoucherAttachment, error) {
	if v.AttachmentsJSON == "" {
		return []VoucherAttachment{}, nil
	}
	var attachments []VoucherAttachment
	err := json.Unmarshal([]byte(v.AttachmentsJSON), &attachments)
	return attachments, err
}

// SetAttachments serializa los adjuntos del comprobante
func (v *Voucher) SetAttachments(attachments []VoucherAttachment) error {
	data, err := json.Marshal(attachments)
	if err != nil {
		return err
	}
	v.AttachmentsJSON = string(data)
	return nil
}

// GetDSLProcessing deserializa la información de procesamiento DSL
func (v *Voucher) GetDSLProcessing() (*DSLProcessingInfo, error) {
	if v.DSLProcessingJSON == "" {
		return &DSLProcessingInfo{}, nil
	}
	var info DSLProcessingInfo
	err := json.Unmarshal([]byte(v.DSLProcessingJSON), &info)
	return &info, err
}

// SetDSLProcessing serializa la información de procesamiento DSL
func (v *Voucher) SetDSLProcessing(info DSLProcessingInfo) error {
	data, err := json.Marshal(info)
	if err != nil {
		return err
	}
	v.DSLProcessingJSON = string(data)
	return nil
}

// GetAdditionalData deserializa los datos adicionales
func (v *Voucher) GetAdditionalData() (*VoucherAdditionalData, error) {
	if v.AdditionalDataJSON == "" {
		return &VoucherAdditionalData{}, nil
	}
	var data VoucherAdditionalData
	err := json.Unmarshal([]byte(v.AdditionalDataJSON), &data)
	return &data, err
}

// SetAdditionalData serializa los datos adicionales
func (v *Voucher) SetAdditionalData(data VoucherAdditionalData) error {
	jsonData, err := json.Marshal(data)
	if err != nil {
		return err
	}
	v.AdditionalDataJSON = string(jsonData)
	return nil
}

// CalculateTotals calcula los totales del comprobante
func (v *Voucher) CalculateTotals() {
	var totalDebit, totalCredit float64
	for _, line := range v.VoucherLines {
		totalDebit += line.DebitAmount
		totalCredit += line.CreditAmount
	}
	v.TotalDebit = totalDebit
	v.TotalCredit = totalCredit
	v.IsBalanced = (totalDebit == totalCredit) && totalDebit > 0
}

// VoucherDetail estructura completa para respuestas detalladas
type VoucherDetail struct {
	*Voucher
	Attachments    []VoucherAttachment    `json:"attachments"`
	DSLProcessing  *DSLProcessingInfo     `json:"dsl_processing"`
	AdditionalData *VoucherAdditionalData `json:"additional_data"`
	ThirdParty     *ThirdParty            `json:"third_party,omitempty"`
	Period         *Period                `json:"period,omitempty"`
}

// ToDetail convierte un Voucher a VoucherDetail con todos los datos
func (v *Voucher) ToDetail() (*VoucherDetail, error) {
	attachments, err := v.GetAttachments()
	if err != nil {
		return nil, err
	}
	
	dslProcessing, err := v.GetDSLProcessing()
	if err != nil {
		return nil, err
	}
	
	additionalData, err := v.GetAdditionalData()
	if err != nil {
		return nil, err
	}
	
	return &VoucherDetail{
		Voucher:        v,
		Attachments:    attachments,
		DSLProcessing:  dslProcessing,
		AdditionalData: additionalData,
	}, nil
}

// VoucherCreateRequest estructura para crear comprobantes
type VoucherCreateRequest struct {
	VoucherType     string                `json:"voucher_type" binding:"required"`
	Date            time.Time             `json:"date" binding:"required"`
	Description     string                `json:"description" binding:"required"`
	Reference       string                `json:"reference"`
	ThirdPartyID    *string               `json:"third_party_id"`
	CostCenterID    *string               `json:"cost_center_id"`
	VoucherLines    []VoucherLineRequest  `json:"voucher_lines" binding:"required,min=2"`
	AdditionalData  *VoucherAdditionalData `json:"additional_data"`
}

// VoucherLineRequest estructura para líneas de comprobante en requests
type VoucherLineRequest struct {
	AccountID       string  `json:"account_id" binding:"required"`
	Description     string  `json:"description" binding:"required"`
	DebitAmount     float64 `json:"debit_amount"`
	CreditAmount    float64 `json:"credit_amount"`
	ThirdPartyID    *string `json:"third_party_id"`
	CostCenterID    *string `json:"cost_center_id"`
	TaxAmount       float64 `json:"tax_amount"`
	TaxRate         float64 `json:"tax_rate"`
	BaseAmount      float64 `json:"base_amount"`
}

// VouchersListResponse respuesta para listado de comprobantes
type VouchersListResponse struct {
	Vouchers   []Voucher       `json:"vouchers"`
	Pagination *PaginationInfo `json:"pagination"`
	Stats      *VoucherStats   `json:"stats,omitempty"`
}

// VoucherStats estadísticas de comprobantes
type VoucherStats struct {
	TotalVouchers int     `json:"total_vouchers"`
	TotalAmount   float64 `json:"total_amount"`
	PendingCount  int     `json:"pending_count"`
	ErrorCount    int     `json:"error_count"`
}